#!/usr/bin/env node

const { execSync } = require("child_process");

function execCommand(cmd, successMessage, errorMessage) {
    execSync(cmd, (err, stdout, stderr) => {
        if (err) {
            console.error(err);
            console.error(errorMessage);
            process.exit(1);
        }

        console.log(stdout);
        console.error(stderr);

        console.log(successMessage);
    });
}

function ensureDbConnectivity() {
    const cmd =`psql -d 'postgresql://${process.env.PG_HOST}:` +
          `${process.env.PG_PASS}@${process.env.PG_HOST}' -c 'select now()'`
    const successMessage = "Successfully pinged the database!";
    const errorMessage = "Can't connect to the database using the credenials provided in the .env file!";

    execCommand(cmd, successMessage, errorMessage)
}

function buildApp(){
    const serverURL = `${process.env.TOOLJET_HOST || ''}/_backend_`;
    const cmd =
          'npm --prefix frontend install && ' +
          'NODE_ENV=production npm --prefix frontend run build && ' +
          'npm --prefix server install && ' +
          `NODE_ENV=production TOOLJET_SERVER_URL=${serverURL}/_backend_ ` +
          'npm --prefix server run build'
    const successMessage = "Successfully built application!";
    const errorMessage = "Could not build the application!";

    execCommand(cmd, successMessage, errorMessage)
}

function startReverseProxy(){
    const cmd = "sudo systemctl start openresty"
    const successMessage = "Successfully started reverse proxy!";
    const errorMessage = "Failed to start reverse proxy!";

    execCommand(cmd, successMessage, errorMessage)
}

function startAppServer(){
    const cmd = "sudo systemctl start nest"
    const successMessage = "Successfully started App server!";
    const errorMessage = "Failed to start App server!";

    execCommand(cmd, successMessage, errorMessage)
}

ensureDbConnectivity()
buildApp()
startReverseProxy()
startAppServer()

console.log(`The app will be served at ${process.env.TOOLJET_HOST}`)
